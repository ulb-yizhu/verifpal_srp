// SRP6a: http://srp.stanford.edu/design.html
attacker[passive]
// register
principal Alice[
    knows private n // pre-shared secret key because not a requirement of SRP
    knows private c
    knows private pwd
    generates salt
    x_register = HASH(salt,pwd)
    gx = G ^ x_register
    enc_v = ENC(n,gx)
]
// store salt, verifier
Aliceâ†’ Bob: salt , enc_v
principal Bob[
    knows private n
    knows private c
    v = DEC(n,enc_v)
    leaks v
]

// establish common session key K
principal Alice[
    generates a
    ga = G^a
]
// send (identifier), A
Alice-> Bob: ga
// compute 
principal Bob[
    generates b
    gb = G^b
    k_Bob = G^c
    kv= HASH(K_Bob,v)
    gvb = ENC(kv,gb) // kv + g^b

    c_Bob = HASH(ga,gvb)  // u = H(A,B)

]
// send (salt), B
Bob-> Alice: gvb
// compute session key S_user
principal Alice[
    c_Alice = HASH(ga,gvb)  // u = H(A,B)
    k_Alice = G ^ c
    x = HASH(salt,pwd)
    new_gx = G ^ x
    kv_Alice = HASH(K_Alice,new_gx)
    gb_get = DEC(kv_Alice,gvb)
    gab =  gb_get ^ a
    gcxb = gvb ^ c_Alice
    s_user = HASH(gab,gcxb) // S = H(g^ab,g^uxb) similar to S = (B - kg^x) ^ (a + ux)
    S_user_hash = HASH(s_user)  // K = H(S)
]

// compute session key S_server
principal Bob[
    gab_prime = ga ^ b
    gcxb_prime = gvb ^ c_Bob
    s_server = HASH(gab_prime,gcxb_prime)  // S = H(g^ab,g^uxb) similar to S = (Av^u) ^ b
    S_server_hash = HASH(s_server)  // K = H(S)
]

// verify session key
principal Alice[
    m1=HASH(ga,gvb,S_user_hash)
]

Alice-> Bob: m1
principal Bob[
    bob_test = HASH(ga,gvb,S_server_hash)
    _ = ASSERT(m1,bob_test)
    m2 = HASH(ga,m1,S_server_hash)
]

Bob-> Alice: m2
principal Alice[
    alice_test = HASH(ga,m1,S_user_hash)
    _ = ASSERT(m2,alice_test)
    generates m
]


queries[
authentication? Alice-> Bob: m1
]

// queries[
//     // leak of verifier ?
//     confidentiality? gx
//     confidentiality? new_gx
//     confidentiality? v
//     // leak of password ?
//     confidentiality? pwd
//     // leak of session key ?
//     confidentiality? S_server_hash
//     confidentiality? S_user_hash
//     // is session key the same ?
//     equivalence? S_server_hash, S_user_hash
//     // 1 hour ?? ....
//     // not into file ? ...
//     // authentication? Alice-> Bob: m1
//     // authentication? Bob-> Alice: m2
// ]
