attacker[active]
// establish common session key K
principal Malserver[
knows private salt
knows private v
generates a
ga = G^a
]

Malserver-> Server: ga
principal Server[
knows private v
knows private salt
generates b , u
gb = G^b
gvb = ENC(v,gb) // v + g^b
// compute the key
gvbu = gvb^u
gab=ga^b
K_B = HASH(gab,gvbu)
leaks salt, v, b, u  // IT LEAKS EVERYTHING
]

Server-> Malserver: gvb, u
principal Malserver[
gbuv = gvb ^ u
gb_dec = DEC(v,gvb)
gba = gb_dec ^ a
K_A = HASH(gba,gbuv)
// verify session key
m1=HASH(ga,gvb,K_A)
]

Malserver-> Server: m1
principal Server[
bob_test = HASH(ga,gvb,K_B)
_1 = ASSERT(m1,bob_test)?
m2 = HASH(ga,m1,K_B)
]

Server-> Malserver: m2
principal Malserver[
Malserver_test=HASH(ga,m1,K_A)
_2=ASSERT(m2,Malserver_test)?
]


queries[
    equivalence? K_B, K_A
    confidentiality? K_B
    confidentiality? K_A
    confidentiality? v
    authentication? Malserver-> Server: m1
    authentication? Malserver-> Server: m1[
    precondition[Server->Malserver: m2]]
    freshness? ga
    freshness? gb
]
