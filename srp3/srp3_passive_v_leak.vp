attacker[passive]
// register
principal Alice[
    knows private n // pre-shared secret key because not a requirement of SRP
    generates salt, pwd
    x = HASH(salt,pwd)
    gx = G^x
    enc_v = ENC(n,gx)
]

Aliceâ†’ Bob: salt , enc_v
principal Bob[
    knows private n
    v = DEC(n,enc_v)
    leaks v // LEAK VERIFIER
]

// establish common session key K
principal Alice[
    generates a
    ga = G^a
]

Alice-> Bob: ga
principal Bob[
    generates b , u
    gb = G^b
    gvb = ENC(v,gb) // v + g^b
    // compute the key
    gvbu = gvb^u
    gab=ga^b
    K_B = HASH(gab,gvbu)
]

Bob-> Alice: gvb, u
principal Alice[
    gbuv = gvb ^ u
    gb_dec = DEC(gx,gvb)
    gba = gb_dec ^ a
    K_A = HASH(gba,gbuv)
// verify session key
    m1=HASH(ga,gvb,K_A)
]

Alice-> Bob: m1
principal Bob[
    bob_test = HASH(ga,gvb,K_B)
    _1 = ASSERT(m1,bob_test)?
    m2 = HASH(ga,m1,K_B)
]

Bob-> Alice: m2
principal Alice[
    alice_test=HASH(ga,m1,K_A)
    _2=ASSERT(m2,alice_test)?
]


queries[
    equivalence? K_B, K_A
    confidentiality? pwd
    confidentiality? K_B
    confidentiality? K_A
    confidentiality? v
    confidentiality? gx
    authentication? Alice-> Bob: m1
    authentication? Alice-> Bob: m1[
    precondition[Bob->Alice: m2]]
    freshness? ga
    freshness? gb
]
